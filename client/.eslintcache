[{"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\index.jsx":"1","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\App.jsx":"2","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\index.jsx":"3","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\components\\Router.jsx":"4","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\architecture\\axiosWrapper.jsx":"5","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\models\\client.model.js":"6","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\components\\Navbar.jsx":"7","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\constants\\index.js":"8","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\constants\\table-headers.js":"9","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\components\\ActionMenu.jsx":"10","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-form\\index.jsx":"11","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-form\\components\\ClientForm.jsx":"12","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\clients-table.service.js":"13","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\client-form.service.js":"14","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\index.jsx":"15","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\constants\\table-headers.js":"16","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\accounts.service.js":"17","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\models\\account.model.js":"18","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\constants\\account-types.js":"19","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\deposit-form\\index.jsx":"20","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\deposit-form\\components\\DepositForm.jsx":"21","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\deposit.service.js":"22","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\index.jsx":"23","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\constants\\table-headers.js":"24","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\constants\\account-types.js":"25","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\models\\deposit.model.js":"26"},{"size":146,"mtime":1611866620493,"results":"27","hashOfConfig":"28"},{"size":411,"mtime":1612013315129,"results":"29","hashOfConfig":"28"},{"size":2849,"mtime":1614024504183,"results":"30","hashOfConfig":"28"},{"size":1135,"mtime":1614024456334,"results":"31","hashOfConfig":"28"},{"size":213,"mtime":1611913652122,"results":"32","hashOfConfig":"28"},{"size":2445,"mtime":1612107350246,"results":"33","hashOfConfig":"28"},{"size":1321,"mtime":1613580868515,"results":"34","hashOfConfig":"28"},{"size":1855,"mtime":1614024473715,"results":"35","hashOfConfig":"28"},{"size":284,"mtime":1612020428423,"results":"36","hashOfConfig":"28"},{"size":1866,"mtime":1614023006129,"results":"37","hashOfConfig":"28"},{"size":8944,"mtime":1612131572416,"results":"38","hashOfConfig":"28"},{"size":8505,"mtime":1612108761297,"results":"39","hashOfConfig":"28"},{"size":404,"mtime":1612021231431,"results":"40","hashOfConfig":"28"},{"size":824,"mtime":1612107579655,"results":"41","hashOfConfig":"28"},{"size":1634,"mtime":1613594595376,"results":"42","hashOfConfig":"28"},{"size":342,"mtime":1613594618460,"results":"43","hashOfConfig":"28"},{"size":729,"mtime":1614094071905,"results":"44","hashOfConfig":"28"},{"size":754,"mtime":1613594516088,"results":"45","hashOfConfig":"28"},{"size":98,"mtime":1613594360819,"results":"46","hashOfConfig":"28"},{"size":13309,"mtime":1614188772123,"results":"47","hashOfConfig":"28"},{"size":3655,"mtime":1614025470055,"results":"48","hashOfConfig":"28"},{"size":1996,"mtime":1614186646927,"results":"49","hashOfConfig":"28"},{"size":1787,"mtime":1614024389789,"results":"50","hashOfConfig":"28"},{"size":426,"mtime":1614023253921,"results":"51","hashOfConfig":"28"},{"size":98,"mtime":1614023134000,"results":"52","hashOfConfig":"28"},{"size":991,"mtime":1614024770436,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"yahaor",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\index.jsx",[],["114","115","116","117","118","119","120","121"],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\App.jsx",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\index.jsx",["122","123"],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\components\\Router.jsx",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\architecture\\axiosWrapper.jsx",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\models\\client.model.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\components\\Navbar.jsx",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\constants\\index.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\constants\\table-headers.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-table\\components\\ActionMenu.jsx",["124"],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-form\\index.jsx",["125"],"import React from 'react';\nimport {\n  Grid, Button,\n} from '@material-ui/core';\nimport styled from 'styled-components';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport moment from 'moment';\nimport ClientForm from './components/ClientForm';\nimport withAxios from '../../architecture/axiosWrapper';\nimport Service from '../../services/client-form.service';\nimport {\n  PAGES, VALIDATION_SCHEMA, GENDER, CITIES, CITIZENSHIPS, DISABILITIES, MARTIAL_STATUSES,\n} from '../../constants';\nimport ClientModel from '../clients-table/models/client.model';\n\nconst ScrollableForm = styled(Grid)`\n  overflow: auto;\n  height: calc(100vh - 56px);\n\n  && {\n    flex-wrap: nowrap;\n  }\n`;\n\nclass ClientsScreen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      values: {\n        name: {\n          value: '',\n          validation: VALIDATION_SCHEMA.REQUIRED_TEXT,\n        },\n        surname: {\n          value: '',\n          validation: VALIDATION_SCHEMA.REQUIRED_TEXT,\n        },\n        patronymic: {\n          value: '',\n          validation: VALIDATION_SCHEMA.REQUIRED_TEXT,\n        },\n        birthday:\n        {\n          value: moment('09/02/2000').toDate(),\n          validation: VALIDATION_SCHEMA.REQUIRED,\n          type: 'date',\n        },\n        gender: {\n          value: GENDER.FEMALE,\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        passportSeries: {\n          value: '',\n          validation: VALIDATION_SCHEMA.PASSPORT_SERIES,\n        },\n        passportNumber: {\n          value: '',\n          validation: VALIDATION_SCHEMA.PASSPORT_NUMBER,\n        },\n        issuedBy: {\n          value: '',\n          validation: VALIDATION_SCHEMA.REQUIRED_TEXT,\n        },\n        issueDate:\n        {\n          value: moment('01/01/2015').toDate(),\n          validation: VALIDATION_SCHEMA.REQUIRED,\n          type: 'date',\n        },\n        identificationNumber:\n        {\n          value: '',\n          validation: VALIDATION_SCHEMA.IDENTIFICATION_NUMBER,\n        },\n        residenceCity:\n        {\n          value: CITIES[0].id,\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        residenceAddress:\n        {\n          value: '',\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        homePhone:\n        {\n          value: '',\n          validation: VALIDATION_SCHEMA.HOME_PHONE,\n        },\n        mobilePhone:\n        {\n          value: '',\n          validation: VALIDATION_SCHEMA.MOBILE_PHONE,\n        },\n        email:\n        {\n          value: '',\n          validation: VALIDATION_SCHEMA.ANY,\n        },\n        workPlace:\n        {\n          value: '',\n          validation: VALIDATION_SCHEMA.ANY,\n        },\n        position:\n        {\n          value: '',\n          validation: VALIDATION_SCHEMA.ANY,\n        },\n        maritalStatus:\n        {\n          value: MARTIAL_STATUSES[0].id,\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        citizenship:\n        {\n          value: CITIZENSHIPS[0].id,\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        disability:\n        {\n          value: DISABILITIES[0].id,\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        pensioner:\n        {\n          value: false,\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        income:\n        {\n          value: 0,\n          validation: VALIDATION_SCHEMA.MONEY,\n        },\n      },\n      errors: {},\n      formId: null,\n      notification: {\n        isOpen: false,\n        message: '',\n        severity: '',\n      },\n      passports: [],\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    const { match, service } = this.props;\n    this.setState({ isLoading: true });\n    const formId = match.params.id;\n    service.getClients()\n      .then((clients) => {\n        const filteredClients = clients.filter((client) => client._id !== formId);\n        this.setState({\n          passports:\n            filteredClients.map((client) => client.passportSeries + client.passportNumber),\n          identificationNumbers: filteredClients.map((client) => client.identificationNumber),\n        });\n      });\n    if (formId) {\n      service.getClient(formId)\n        .then((client) => {\n          const form = new ClientModel(client).getInstance();\n          const { values } = this.state;\n          const fields = Object.keys(values);\n          this.setState({\n            formId,\n            values:\n              Object.assign({},\n                ...fields.map((field) => ({\n                  [field]: {\n                    ...values[field],\n                    value: form[field],\n                  },\n                }))),\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    this.setState({ isLoading: false });\n  }\n\n  onChange = (event) => {\n    const { value, name } = event.target;\n    this.setState((state) => ({\n      values: { ...state.values, [name]: { ...state.values[name], value } },\n    }));\n  };\n\n  onCheckboxChange = (event) => {\n    const { checked, name } = event.target;\n    this.setState((state) => ({\n      values: { ...state.values, [name]: { ...state.values[name], value: checked } },\n    }));\n  };\n\n  onDateChange = (name, value) => {\n    this.setState((state) => ({\n      values: {\n        ...state.values, [name]: { ...state.values[name], value: value ? new Date(value) : null },\n      },\n      errors: {\n        ...state.errors, [name]: value ? !value._isValid : true,\n      },\n    }));\n  };\n\n  validateForm = (values) => {\n    let isFormValid = true;\n    const { errors } = this.state;\n    Object.keys(values).forEach((key) => {\n      const { value = '', validation, type } = values[key];\n      if (!value.toString().match(validation) || (type === 'date' && errors[key])) {\n        isFormValid = false;\n        this.setState((state) => ({ ...state, errors: { ...state.errors, [key]: true } }));\n        return;\n      }\n      this.setState((state) => ({ ...state, errors: { ...state.errors, [key]: false } }));\n    });\n    const { passports, identificationNumbers } = this.state;\n    if (passports.includes(values.passportSeries.value + values.passportNumber.value)) {\n      isFormValid = false;\n      this.setState((state) => ({\n        ...state,\n        errors: { ...state.errors, passportSeries: true, passportNumber: true },\n      }));\n    }\n    if (identificationNumbers.includes(values.identificationNumber.value)) {\n      isFormValid = false;\n      this.setState((state) => ({\n        ...state,\n        errors: { ...state.errors, identificationNumber: true },\n      }));\n    }\n    return isFormValid;\n  };\n\n  onFormSubmit = () => {\n    const { values, formId } = this.state;\n    if (!this.validateForm(values)) {\n      return;\n    }\n    const { service } = this.props;\n    let submitFn = service.createClient;\n    const form = Object.assign({},\n      ...Object.keys(values).map((key) => ({ [key]: values[key].value })));\n    let submitParams = [form];\n    if (formId) {\n      submitFn = service.updateClient;\n      submitParams = [formId, ...submitParams];\n    }\n    submitFn(...submitParams)\n      .then(() => {\n        const { history } = this.props;\n        history.push(PAGES.CLIENT_LIST);\n      })\n      .catch((err) => this.addNotification({ message: err.message, type: 'error' }));\n  };\n\n  addNotification = ({\n    message, type: severity,\n  }, cb) => this.setState({ notification: { isOpen: true, message, severity } }, cb);\n\n  render() {\n    const {\n      values, formId, isLoading, errors, notification,\n    } = this.state;\n    const { isOpen, message, severity } = notification;\n    return (\n      <ScrollableForm container alignItems=\"center\" direction=\"column\" justify={isLoading ? 'center' : 'flex-start'}>\n        {isLoading\n          ? <CircularProgress color=\"secondary\" />\n          : (\n            <>\n              <ClientForm\n                onChange={this.onChange}\n                onDateChange={this.onDateChange}\n                onCheckboxChange={this.onCheckboxChange}\n                values={values}\n                errors={errors}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.onFormSubmit}\n              >\n                {formId ? 'Update' : 'Create'}\n              </Button>\n            </>\n          )}\n        <Snackbar\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          open={isOpen}\n          onClose={() => this.setState({ notification: { message: '', isOpen: false, severity: '' } })}\n          autoHideDuration={3000}\n        >\n          <Alert elevation={6} variant=\"filled\" severity={severity}>\n            {message}\n          </Alert>\n        </Snackbar>\n      </ScrollableForm>\n    );\n  }\n}\n\nexport default withAxios(ClientsScreen, Service);\n","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\clients-form\\components\\ClientForm.jsx",["126"],"import React from 'react';\nimport {\n  TextField, Grid, Radio, RadioGroup, FormControl, FormHelperText,\n  FormControlLabel, FormLabel, InputLabel, Select, MenuItem, Checkbox,\n} from '@material-ui/core';\nimport styled from 'styled-components';\nimport MomentUtils from '@date-io/moment';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport {\n  DATE_FORMAT, GENDER, CITIES, MARTIAL_STATUSES, CITIZENSHIPS, DISABILITIES,\n} from '../../../constants';\n\nconst FormContainer = styled(Grid)`\n  display: flex;\n  margin-bottom: 20px;\n\n  && > * {\n    width: 300px;\n    margin: 6px 30px;\n    height: 65px;\n  }\n`;\n\nconst StyledKeyboardDatePicker = styled(KeyboardDatePicker)`\n  && > .MuiInputBase-root {\n    height: 50px;\n  }\n`;\n\nconst StyledRadioGroup = styled(RadioGroup)`\n  && {\n    display: flex;\n    flex-direction: row;\n  }\n`;\n\nfunction ClientForm(props) {\n  const {\n    onChange, values, onDateChange, errors, onCheckboxChange,\n  } = props;\n  console.log(errors);\n  const {\n    name, surname, patronymic, birthday, email, workPlace,\n    gender, residenceCity, residenceAddress, homePhone, income,\n    passportNumber, passportSeries, issuedBy, position, maritalStatus,\n    issueDate, identificationNumber, mobilePhone, citizenship, disability, pensioner,\n  } = values;\n  return (\n    <FormContainer container justify=\"center\">\n      <TextField\n        error={errors.name}\n        label=\"Name\"\n        name=\"name\"\n        value={name.value}\n        onChange={onChange}\n        helperText={errors.name ? 'Name must contains letters and be completed' : ''}\n      />\n      <TextField\n        error={errors.surname}\n        label=\"Surname\"\n        name=\"surname\"\n        value={surname.value}\n        onChange={onChange}\n        helperText={errors.surname ? 'Surname must contains letters and be completed' : ''}\n      />\n      <TextField\n        error={errors.patronymic}\n        label=\"Patronymic\"\n        name=\"patronymic\"\n        value={patronymic.value}\n        onChange={onChange}\n        helperText={errors.patronymic ? 'Patronymic must contains letters and be completed' : ''}\n      />\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <StyledKeyboardDatePicker\n          clearable\n          error={errors.birthday}\n          value={birthday.value}\n          placeholder=\"Birthday\"\n          helperText={errors.birthday ? 'Birthday is not valid' : ''}\n          onChange={(value) => onDateChange('birthday', value)}\n          maxDate={new Date()}\n          format={DATE_FORMAT}\n        />\n      </MuiPickersUtilsProvider>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Gender</FormLabel>\n        <StyledRadioGroup aria-label=\"gender\" name=\"gender\" value={gender.value} onChange={onChange}>\n          <FormControlLabel value={GENDER.FEMALE} control={<Radio />} label={GENDER.FEMALE} />\n          <FormControlLabel value={GENDER.MALE} control={<Radio />} label={GENDER.MALE} />\n          <FormControlLabel value={GENDER.OTHER} control={<Radio />} label={GENDER.OTHER} />\n        </StyledRadioGroup>\n      </FormControl>\n      <TextField\n        error={errors.passportSeries}\n        label=\"Passport series\"\n        name=\"passportSeries\"\n        value={passportSeries.value}\n        onChange={onChange}\n        helperText={errors.passportSeries ? 'Passport series is not valid or not unique' : ''}\n      />\n      <TextField\n        error={errors.passportNumber}\n        label=\"Passport number\"\n        name=\"passportNumber\"\n        value={passportNumber.value}\n        onChange={onChange}\n        helperText={errors.passportNumber ? 'Passport number is not valid or not unique' : ''}\n      />\n      <TextField\n        error={errors.issuedBy}\n        label=\"Issued by\"\n        name=\"issuedBy\"\n        value={issuedBy.value}\n        onChange={onChange}\n        helperText={errors.issuedBy ? 'Issued by must contains letters and be completed' : ''}\n      />\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <StyledKeyboardDatePicker\n          clearable\n          error={errors.issueDate}\n          value={issueDate.value}\n          placeholder=\"Issue date\"\n          helperText={errors.issueDate ? 'Issue date is not valid' : ''}\n          onChange={(value) => onDateChange('issueDate', value)}\n          maxDate={new Date()}\n          format={DATE_FORMAT}\n        />\n      </MuiPickersUtilsProvider>\n      <TextField\n        error={errors.identificationNumber}\n        label=\"Identification number\"\n        name=\"identificationNumber\"\n        value={identificationNumber.value}\n        onChange={onChange}\n        helperText={errors.identificationNumber ? 'Identification number is not valid or not unique' : ''}\n      />\n      <FormControl>\n        <InputLabel error={errors.residenceCity}>Residence city</InputLabel>\n        <Select\n          value={residenceCity.value}\n          name=\"residenceCity\"\n          onChange={onChange}\n          error={errors.residenceCity}\n        >\n          {CITIES.map((city) => (\n            <MenuItem key={city.id} value={city.id}>{city.value}</MenuItem>\n          ))}\n        </Select>\n        {errors.residenceCity && <FormHelperText error>Residence city is required</FormHelperText>}\n      </FormControl>\n      <TextField\n        error={errors.residenceAddress}\n        label=\"Residence address\"\n        name=\"residenceAddress\"\n        value={residenceAddress.value}\n        onChange={onChange}\n        helperText={errors.residenceAddress ? 'Residence address is required' : ''}\n      />\n      <TextField\n        error={errors.homePhone}\n        label=\"Home phone\"\n        name=\"homePhone\"\n        value={homePhone.value}\n        onChange={onChange}\n        helperText={errors.homePhone ? 'Home phone is not valid' : ''}\n      />\n      <TextField\n        error={errors.mobilePhone}\n        label=\"Mobile phone\"\n        name=\"mobilePhone\"\n        value={mobilePhone.value}\n        onChange={onChange}\n        helperText={errors.mobilePhone ? 'Mobile phone is not valid' : ''}\n      />\n      <TextField\n        label=\"Email\"\n        name=\"email\"\n        value={email.value}\n        onChange={onChange}\n      />\n      <TextField\n        label=\"Work place\"\n        name=\"workPlace\"\n        value={workPlace.value}\n        onChange={onChange}\n      />\n      <TextField\n        label=\"Position\"\n        name=\"position\"\n        value={position.value}\n        onChange={onChange}\n      />\n      <FormControl>\n        <InputLabel error={errors.maritalStatus}>Marital status</InputLabel>\n        <Select\n          value={maritalStatus.value}\n          name=\"maritalStatus\"\n          onChange={onChange}\n          error={errors.maritalStatus}\n        >\n          {MARTIAL_STATUSES.map((status) => (\n            <MenuItem key={status.id} value={status.id}>{status.value}</MenuItem>\n          ))}\n        </Select>\n        {errors.maritalStatus && <FormHelperText error>Marital status is required</FormHelperText>}\n      </FormControl>\n      <FormControl>\n        <InputLabel error={errors.citizenship}>Citizenship</InputLabel>\n        <Select\n          value={citizenship.value}\n          name=\"citizenship\"\n          onChange={onChange}\n          error={errors.citizenship}\n        >\n          {CITIZENSHIPS.map((city) => (\n            <MenuItem key={city.id} value={city.id}>{city.value}</MenuItem>\n          ))}\n        </Select>\n        {errors.citizenship && <FormHelperText error>Citizenship is required</FormHelperText>}\n      </FormControl>\n      <FormControl>\n        <InputLabel error={errors.disability}>Disability</InputLabel>\n        <Select\n          value={disability.value}\n          name=\"disability\"\n          onChange={onChange}\n          error={errors.disability}\n        >\n          {DISABILITIES.map((disab) => (\n            <MenuItem key={disab.id} value={disab.id}>{disab.value}</MenuItem>\n          ))}\n        </Select>\n        {errors.disability && <FormHelperText error>Disability is required</FormHelperText>}\n      </FormControl>\n      <FormControlLabel\n        control={(\n          <Checkbox\n            checked={pensioner.value}\n            onChange={onCheckboxChange}\n            name=\"pensioner\"\n            color=\"primary\"\n          />\n        )}\n        label=\"Pensioner\"\n      />\n      <TextField\n        label=\"Income\"\n        name=\"income\"\n        error={errors.income}\n        value={income.value}\n        onChange={onChange}\n        helperText={errors.income ? 'Income is not valid' : ''}\n      />\n    </FormContainer>\n  );\n}\n\nexport default ClientForm;\n","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\clients-table.service.js",["127","128"],"import axios from 'axios';\n\nconst API_PATH = process.env.API_PATH || 'http://localhost:5000/api';\n\nconst service = {\n  getClients: () => axios\n    .get(`${API_PATH}/clients`)\n    .then((res) => res.data)\n    .catch((err) => console.log(err)),\n  removeClient: (id) => axios\n    .delete(`${API_PATH}/client/${id}`)\n    .then((res) => res)\n    .catch((err) => console.log(err)),\n};\n\nexport default service;\n","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\client-form.service.js",["129","130","131","132","133"],"import axios from 'axios';\n\nconst API_PATH = process.env.API_PATH || 'http://localhost:5000/api';\n\nconst service = {\n  createClient: (client) => axios\n    .post(`${API_PATH}/client`, client)\n    .then((res) => res.data)\n    .catch((err) => console.log(err)),\n  updateClient: (id, client) => axios\n    .put(`${API_PATH}/client/${id}`, client)\n    .then((res) => res)\n    .catch((err) => console.log(err)),\n  getClient: (id) => axios\n    .get(`${API_PATH}/client/${id}`)\n    .then((res) => res.data)\n    .catch((err) => console.log(err)),\n  getClients: () => axios\n    .get(`${API_PATH}/clients`)\n    .then((res) => res.data)\n    .catch((err) => console.log(err)),\n  removeClient: (id) => axios\n    .delete(`${API_PATH}/client/${id}`)\n    .then((res) => res)\n    .catch((err) => console.log(err)),\n};\n\nexport default service;\n","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\index.jsx",["134","135"],"import React from 'react';\nimport styled from 'styled-components';\nimport { Grid } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport tableHeaders from './constants/table-headers';\nimport Service from '../../services/accounts.service';\nimport withAxios from '../../architecture/axiosWrapper';\nimport AccountModel from './models/account.model';\nimport { PAGES } from '../../constants';\n\nconst TableContainer = styled(Grid)`\n  padding: 14px;\n  height: calc(100vh - 56px);\n  box-sizing: border-box;\n`;\n\nclass ClientsScreen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columns: tableHeaders,\n      rows: [],\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    this.getAccounts();\n  }\n\n  getAccounts = () => {\n    const { service } = this.props;\n    service.getAccounts()\n      .then((accounts) => this.setState({\n        rows: accounts.map((account) => new AccountModel(account).getInstance()),\n      }))\n      .then(() => { })\n      .catch((err) => console.log(err))\n      .finally(() => this.setState({ isLoading: false }));\n  };\n\n  render() {\n    const { columns, rows, isLoading } = this.state;\n    return (\n      <TableContainer>\n        <DataGrid\n          // sortModel={[\n          //   {\n          //     field: 'patronymic',\n          //     sort: 'desc',\n          //   },\n          // ]}\n          rows={rows}\n          columns={columns}\n          pageSize={5}\n          loading={isLoading}\n        />\n      </TableContainer>\n    );\n  }\n}\n\nexport default withAxios(ClientsScreen, Service);\n","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\constants\\table-headers.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\accounts.service.js",["136"],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\models\\account.model.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\accounts\\constants\\account-types.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\deposit-form\\index.jsx",["137","138","139","140","141","142","143"],"/* eslint-disable indent */\nimport React from 'react';\nimport {\n  Grid, Button,\n} from '@material-ui/core';\nimport styled from 'styled-components';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport moment from 'moment';\nimport DepositForm from './components/DepositForm';\nimport withAxios from '../../architecture/axiosWrapper';\nimport Service from '../../services/deposit.service';\nimport {\n  PAGES, VALIDATION_SCHEMA, DEPOSIT_TYPES,\n} from '../../constants';\nimport DepositModel from '../client-deposits/models/deposit.model';\n\nconst ScrollableForm = styled(Grid)`\n  overflow: auto;\n  height: calc(100vh - 56px);\n\n  && {\n    flex-wrap: nowrap;\n  }\n`;\n\nconst ButtonContainer = styled(Grid)`\n  display: flex;\n  width: 40%;\n  justify-content: space-around;\n`;\n\nclass ClientsScreen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      values: {\n        depositType: {\n          value: DEPOSIT_TYPES[0].id,\n          validation: VALIDATION_SCHEMA.REQUIRED,\n        },\n        contractNumber: {\n          value: '',\n          validation: VALIDATION_SCHEMA.REQUIRED_ACCOUNT_NUMBER,\n        },\n        startDate: {\n          value: moment().toDate(),\n          validation: VALIDATION_SCHEMA.REQUIRED,\n          type: 'date',\n        },\n        endDate: {\n          value: moment().toDate(),\n          validation: VALIDATION_SCHEMA.REQUIRED,\n          type: 'date',\n        },\n        money:\n        {\n          value: 0,\n          validation: VALIDATION_SCHEMA.REQUIRED_NUMBER,\n        },\n        percent:\n        {\n          value: 0,\n          validation: VALIDATION_SCHEMA.REQUIRED_NUMBER,\n        },\n        dayPassed: {\n          value: '',\n        },\n      },\n      errors: {},\n      clientId: null,\n      notification: {\n        isOpen: false,\n        message: '',\n        severity: '',\n      },\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    const { match, service } = this.props;\n    this.setState({ isLoading: true });\n    const { depositId, id: clientId } = match.params;\n    this.setState({ depositId, clientId });\n    if (depositId) {\n      service.getDeposit(depositId)\n        .then((deposit) => {\n          const form = new DepositModel(deposit).getInstance();\n          console.log(deposit);\n          const { values } = this.state;\n          const fields = Object.keys(values);\n          this.setState({\n            values:\n              Object.assign({},\n                ...fields.map((field) => ({\n                  [field]: {\n                    ...values[field],\n                    value: form[field],\n                  },\n                }))),\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    this.setState({ isLoading: false });\n  }\n\n  onChange = (event) => {\n    const { value, name } = event.target;\n    this.setState((state) => ({\n      values: { ...state.values, [name]: { ...state.values[name], value } },\n    }));\n  };\n\n  onDateChange = (name, value) => {\n    this.setState((state) => ({\n      values: {\n        ...state.values, [name]: { ...state.values[name], value: value ? new Date(value) : null },\n      },\n      errors: {\n        ...state.errors, [name]: value ? !value._isValid : true,\n      },\n    }));\n  };\n\n  validateForm = (values) => {\n    let isFormValid = true;\n    const { errors } = this.state;\n    Object.keys(values).forEach((key) => {\n      const { value = '', validation, type } = values[key];\n      if (!value.toString().match(validation) || (type === 'date' && errors[key])) {\n        isFormValid = false;\n        this.setState((state) => ({ ...state, errors: { ...state.errors, [key]: true } }));\n        return;\n      }\n      this.setState((state) => ({ ...state, errors: { ...state.errors, [key]: false } }));\n    });\n    return isFormValid;\n  };\n\n  onFormSubmit = () => {\n    const { values, clientId } = this.state;\n    if (!this.validateForm(values)) {\n      return;\n    }\n    const { service, match } = this.props;\n    // const { depositId } = match.params;\n    // console.log(depositId);\n    const form = Object.assign({},\n      ...Object.keys(values).map((key) => ({ [key]: values[key].value })));\n    service.createDeposit({ ...form, clientId, dayPassed: 0 })\n      .then(async (deposit) => {\n        console.log(deposit);\n        await service.createAccount({\n          accountNumber: `2${(new Array(12)).fill()\n            .map(() => Math.floor(Math.random() * Math.floor(10))).join('')}`,\n          type: 'passive',\n          debet: 0,\n          credit: 0,\n          depositId: deposit._id,\n          depositType: 'percent',\n        });\n        const curAccount = await service.createAccount({\n          accountNumber: `3${(new Array(12)).fill()\n            .map(() => Math.floor(Math.random() * Math.floor(10))).join('')}`,\n          type: 'passive',\n          debet: 0,\n          credit: 0,\n          depositId: deposit._id,\n          depositType: 'current',\n        });\n        return curAccount;\n      })\n      .then((curAccount) => {\n        service.changeCash({ debet: values.money.value, credit: values.money.value });\n        service.changeFond({ debet: 0, credit: values.money.value });\n        service.changeCurrentAccount(curAccount,\n          { debet: values.money.value, credit: values.money.value });\n        return curAccount;\n      })\n      .then(({ depositId }) => {\n        const { history } = this.props;\n        history.push(`/client-form/${clientId}/deposits/${depositId}`);\n      })\n      .catch((err) => this.addNotification({ message: err.message, type: 'error' }));\n  };\n\n  addNotification = ({\n    message, type: severity,\n  }, cb) => this.setState({ notification: { isOpen: true, message, severity } }, cb);\n\n  closeDay = () => {\n    const { values } = this.state;\n    const { service, match } = this.props;\n    const { depositId } = match.params;\n    const { value: percent } = values.percent;\n    const { value: money } = values.money;\n    const clientPercent = percent * money / 36500;\n    service.changePercentAccount({ depositId },\n      { debet: 0, credit: clientPercent });\n    service.changeFond({ debet: clientPercent, credit: 0 });\n    this.onChange({ target: { value: values.dayPassed.value + 1, name: 'dayPassed' } });\n  };\n\n  closeMonth = () => {\n    const { values } = this.state;\n    const { service, match } = this.props;\n    const { depositId } = match.params;\n    const { value: percent } = values.percent;\n    const { value: money } = values.money;\n    const clientPercent = percent * money * 30 / 36500;\n    service.changePercentAccount({ depositId },\n      { debet: 0, credit: clientPercent })\n      .then(() => service.changeFond({ debet: clientPercent, credit: 0 }))\n      .then(() => service.getPercentAccount(depositId))\n      .then((acc) => {\n        service.changeCash({ debet: acc.credit, credit: acc.credit });\n        return acc;\n      })\n      .then((acc) => service.changePercentAccount({ depositId }, { debet: acc.credit, credit: 0 }));\n    this.onChange({ target: { value: values.dayPassed.value + 30, name: 'dayPassed' } });\n  };\n\n  closeDeposit = () => {\n    const { values } = this.state;\n    const { service, match } = this.props;\n    const { depositId } = match.params;\n    const { value: startDate } = values.startDate;\n    const { value: endDate } = values.endDate;\n    const { value: percent } = values.percent;\n    const { value: money } = values.money;\n    const { value: dayPassed } = values.dayPassed;\n    const sDate = new Date(startDate);\n    const eDate = new Date(endDate);\n    const depositTime = (eDate.getTime() - sDate.getTime()) / (1000 * 3600 * 24);\n    this.onChange({ target: { value: depositTime, name: 'dayPassed' } });\n    const clientPercent = percent * money * (depositTime - dayPassed) / 36500;\n    console.log(clientPercent, percent, money, depositTime, dayPassed);\n    service.changeFond({ debet: clientPercent + money, credit: 0 });\n\n    service.getPercentAccount(depositId)\n      .then((acc) => service.changePercentAccount({ depositId },\n        {\n          debet: (money + (money * percent) / 100) * depositTime / 365 - acc.debet,\n          credit: (money + (money * percent) / 100) * depositTime / 365 - acc.credit,\n        }));\n    service.getCurrentAccount(depositId)\n      .then((acc) => service.changeCurrentAccount({ depositId },\n        {\n          debet: (money + (money * percent) / 100) * depositTime / 365 - acc.debet,\n          credit: (money + (money * percent) / 100) * depositTime / 365 - acc.credit,\n        }));\n    service.getCash(depositId)\n      .then((acc) => service.changeCash(\n        {\n          debet: (money + (money * percent) / 100) * depositTime / 365 - acc.debet,\n          credit: (money + (money * percent) / 100) * depositTime / 365 - acc.credit,\n        },\n      ));\n  };\n\n  withdrawDeposit = () => {\n    const { values } = this.state;\n    const { service, match } = this.props;\n    const { depositId } = match.params;\n    const { value: startDate } = values.startDate;\n    const { value: endDate } = values.endDate;\n    const { value: percent } = values.percent;\n    const { value: money } = values.money;\n    const { value: dayPassed } = values.dayPassed;\n    const sDate = new Date(startDate);\n    const eDate = new Date(endDate);\n    const depositTime = (eDate.getTime() - sDate.getTime()) / (1000 * 3600 * 24);\n    this.onChange({ target: { value: depositTime, name: 'dayPassed' } });\n    const clientPercent = percent * money * (depositTime - dayPassed) / 36500;\n    console.log(clientPercent, percent, money, depositTime, dayPassed);\n    service.changeFond({ debet: clientPercent + money, credit: 0 });\n\n    service.getPercentAccount(depositId)\n      .then((acc) => service.changePercentAccount({ depositId },\n        {\n          debet: (money + (money * percent) / 100) * dayPassed / 365 - acc.debet,\n          credit: (money + (money * percent) / 100) * dayPassed / 365 - acc.credit,\n        }));\n    service.getCurrentAccount(depositId)\n      .then((acc) => service.changeCurrentAccount({ depositId },\n        {\n          debet: (money + (money * percent) / 100) * dayPassed / 365 - acc.debet,\n          credit: (money + (money * percent) / 100) * dayPassed / 365 - acc.credit,\n        }));\n    service.getCash(depositId)\n      .then((acc) => service.changeCash(\n        {\n          debet: (money + (money * percent) / 100) * dayPassed / 365 - acc.debet,\n          credit: (money + (money * percent) / 100) * dayPassed / 365 - acc.credit,\n        },\n      ));\n};\n\n  render() {\n    const {\n      values, depositId, isLoading, errors, notification,\n    } = this.state;\n    const { isOpen, message, severity } = notification;\n    return (\n      <ScrollableForm container alignItems=\"center\" direction=\"column\" justify={isLoading ? 'center' : 'flex-start'}>\n        {isLoading\n          ? <CircularProgress color=\"secondary\" />\n          : (\n            <>\n              <DepositForm\n                onChange={this.onChange}\n                onDateChange={this.onDateChange}\n                values={values}\n                errors={errors}\n                depositId={depositId}\n              />\n              {!depositId ? (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.onFormSubmit}\n                >\n                  Create\n                </Button>\n              ) : (\n                  // eslint-disable-next-line react/jsx-indent\n                  <ButtonContainer>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={this.closeDay}\n                    >\n                      Close Day\n                    </Button>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={this.closeMonth}\n                    >\n                      Close Month\n                    </Button>\n                    {values.depositType.value === DEPOSIT_TYPES[0].id ? (\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={this.withdrawDeposit}\n                      >\n                        Withdraw Deposit\n                      </Button>\n                    )\n                      : (\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={this.closeDeposit}\n                        >\n                          Close Deposit\n                        </Button>\n                      )}\n                  </ButtonContainer>\n                )}\n            </>\n          )}\n        <Snackbar\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          open={isOpen}\n          onClose={() => this.setState({ notification: { message: '', isOpen: false, severity: '' } })}\n          autoHideDuration={3000}\n        >\n          <Alert elevation={6} variant=\"filled\" severity={severity}>\n            {message}\n          </Alert>\n        </Snackbar>\n      </ScrollableForm>\n    );\n  }\n}\n\nexport default withAxios(ClientsScreen, Service);\n","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\deposit-form\\components\\DepositForm.jsx",["144","145","146","147","148","149","150","151","152","153"],"import React from 'react';\nimport {\n  TextField, Grid, Radio, RadioGroup, FormControl, FormHelperText,\n  FormControlLabel, FormLabel, InputLabel, Select, MenuItem, Checkbox,\n} from '@material-ui/core';\nimport styled from 'styled-components';\nimport MomentUtils from '@date-io/moment';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport {\n  DATE_FORMAT, GENDER, CITIES, MARTIAL_STATUSES, CITIZENSHIPS, DISABILITIES, DEPOSIT_TYPES,\n} from '../../../constants';\n\nconst FormContainer = styled(Grid)`\n  display: flex;\n  margin-bottom: 20px;\n\n  && > * {\n    width: 300px;\n    margin: 6px 30px;\n    height: 65px;\n  }\n`;\n\nconst StyledKeyboardDatePicker = styled(KeyboardDatePicker)`\n  && > .MuiInputBase-root {\n    height: 50px;\n  }\n`;\n\nfunction ClientForm(props) {\n  const {\n    onChange, values, onDateChange, errors, depositId,\n  } = props;\n  const disabled = !!depositId;\n  const {\n    depositType, contractNumber, startDate, endDate, money, percent, dayPassed,\n  } = values;\n  return (\n    <FormContainer container justify=\"center\">\n      <FormControl>\n        <InputLabel error={errors.depositType}>Deposit Type</InputLabel>\n        <Select\n          value={depositType.value}\n          name=\"depositType\"\n          onChange={onChange}\n          error={errors.depositType}\n          disabled={disabled}\n        >\n          {DEPOSIT_TYPES.map((type) => (\n            <MenuItem key={type.id} value={type.id}>{type.value}</MenuItem>\n          ))}\n        </Select>\n        {errors.depositType && <FormHelperText error>Deposit Type is required</FormHelperText>}\n      </FormControl>\n      <TextField\n        error={errors.contractNumber}\n        label=\"Contract Number\"\n        name=\"contractNumber\"\n        value={contractNumber.value}\n        onChange={onChange}\n        disabled={disabled}\n        helperText={errors.contractNumber ? 'Contract number is not valid or not unique' : ''}\n      />\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <StyledKeyboardDatePicker\n          clearable\n          error={errors.startDate}\n          value={startDate.value}\n          placeholder=\"Start Date\"\n          helperText={errors.startDate ? 'Issue date is not valid' : ''}\n          disabled={disabled}\n          onChange={(value) => onDateChange('startDate', value)}\n          maxDate={new Date()}\n          format={DATE_FORMAT}\n        />\n      </MuiPickersUtilsProvider>\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <StyledKeyboardDatePicker\n          clearable\n          error={errors.endDate}\n          value={endDate.value}\n          placeholder=\"End Date\"\n          disabled={disabled}\n          helperText={errors.endDate ? 'End date is not valid' : ''}\n          onChange={(value) => onDateChange('endDate', value)}\n          minDate={new Date()}\n          format={DATE_FORMAT}\n        />\n      </MuiPickersUtilsProvider>\n      <TextField\n        error={errors.money}\n        label=\"Money\"\n        name=\"money\"\n        disabled={disabled}\n        value={money.value}\n        onChange={onChange}\n        helperText={errors.money ? 'Money is not valid or not unique' : ''}\n      />\n      <TextField\n        error={errors.percent}\n        label=\"Perсent\"\n        name=\"percent\"\n        value={percent.value}\n        onChange={onChange}\n        helperText={errors.percent ? 'Issued by must contains letters and be completed' : ''}\n        disabled={disabled}\n      />\n      {disabled && (\n        <TextField\n          label=\"Day Passed\"\n          name=\"dayPassed\"\n          value={dayPassed.value}\n          disabled\n        />\n      )}\n    </FormContainer>\n  );\n}\n\nexport default ClientForm;\n","E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\services\\deposit.service.js",["154","155","156","157","158","159","160","161","162","163","164"],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\index.jsx",["165","166"],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\constants\\table-headers.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\constants\\account-types.js",[],"E:\\8sem\\8semLabs\\PIRIS\\Piris\\client\\src\\modules\\client-deposits\\models\\deposit.model.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":62,"column":23,"nodeType":"185","messageId":"186","endLine":62,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":72,"column":23,"nodeType":"185","messageId":"186","endLine":72,"endColumn":34},{"ruleId":"187","severity":1,"message":"188","line":6,"column":10,"nodeType":"189","messageId":"190","endLine":6,"endColumn":15},{"ruleId":"183","severity":1,"message":"184","line":183,"column":11,"nodeType":"185","messageId":"186","endLine":183,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":41,"column":3,"nodeType":"185","messageId":"186","endLine":41,"endColumn":14},{"ruleId":"183","severity":1,"message":"184","line":9,"column":21,"nodeType":"185","messageId":"186","endLine":9,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":13,"column":21,"nodeType":"185","messageId":"186","endLine":13,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":9,"column":21,"nodeType":"185","messageId":"186","endLine":9,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":13,"column":21,"nodeType":"185","messageId":"186","endLine":13,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":17,"column":21,"nodeType":"185","messageId":"186","endLine":17,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":21,"column":21,"nodeType":"185","messageId":"186","endLine":21,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":25,"column":21,"nodeType":"185","messageId":"186","endLine":25,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":9,"column":10,"nodeType":"189","messageId":"190","endLine":9,"endColumn":15},{"ruleId":"183","severity":1,"message":"184","line":40,"column":23,"nodeType":"185","messageId":"186","endLine":40,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":21,"column":21,"nodeType":"185","messageId":"186","endLine":21,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":15,"column":3,"nodeType":"189","messageId":"190","endLine":15,"endColumn":8},{"ruleId":"183","severity":1,"message":"184","line":92,"column":11,"nodeType":"185","messageId":"186","endLine":92,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":107,"column":11,"nodeType":"185","messageId":"186","endLine":107,"endColumn":22},{"ruleId":"187","severity":1,"message":"191","line":151,"column":22,"nodeType":"189","messageId":"190","endLine":151,"endColumn":27},{"ruleId":"183","severity":1,"message":"184","line":158,"column":9,"nodeType":"185","messageId":"186","endLine":158,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":243,"column":5,"nodeType":"185","messageId":"186","endLine":243,"endColumn":16},{"ruleId":"183","severity":1,"message":"184","line":281,"column":5,"nodeType":"185","messageId":"186","endLine":281,"endColumn":16},{"ruleId":"187","severity":1,"message":"192","line":3,"column":20,"nodeType":"189","messageId":"190","endLine":3,"endColumn":25},{"ruleId":"187","severity":1,"message":"193","line":3,"column":27,"nodeType":"189","messageId":"190","endLine":3,"endColumn":37},{"ruleId":"187","severity":1,"message":"194","line":4,"column":3,"nodeType":"189","messageId":"190","endLine":4,"endColumn":19},{"ruleId":"187","severity":1,"message":"195","line":4,"column":21,"nodeType":"189","messageId":"190","endLine":4,"endColumn":30},{"ruleId":"187","severity":1,"message":"196","line":4,"column":62,"nodeType":"189","messageId":"190","endLine":4,"endColumn":70},{"ruleId":"187","severity":1,"message":"197","line":10,"column":16,"nodeType":"189","messageId":"190","endLine":10,"endColumn":22},{"ruleId":"187","severity":1,"message":"198","line":10,"column":24,"nodeType":"189","messageId":"190","endLine":10,"endColumn":30},{"ruleId":"187","severity":1,"message":"199","line":10,"column":32,"nodeType":"189","messageId":"190","endLine":10,"endColumn":48},{"ruleId":"187","severity":1,"message":"200","line":10,"column":50,"nodeType":"189","messageId":"190","endLine":10,"endColumn":62},{"ruleId":"187","severity":1,"message":"201","line":10,"column":64,"nodeType":"189","messageId":"190","endLine":10,"endColumn":76},{"ruleId":"183","severity":1,"message":"184","line":13,"column":21,"nodeType":"185","messageId":"186","endLine":13,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":17,"column":21,"nodeType":"185","messageId":"186","endLine":17,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":21,"column":21,"nodeType":"185","messageId":"186","endLine":21,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":25,"column":21,"nodeType":"185","messageId":"186","endLine":25,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":29,"column":21,"nodeType":"185","messageId":"186","endLine":29,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":33,"column":21,"nodeType":"185","messageId":"186","endLine":33,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":37,"column":21,"nodeType":"185","messageId":"186","endLine":37,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":41,"column":21,"nodeType":"185","messageId":"186","endLine":41,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":45,"column":21,"nodeType":"185","messageId":"186","endLine":45,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":49,"column":21,"nodeType":"185","messageId":"186","endLine":49,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":53,"column":21,"nodeType":"185","messageId":"186","endLine":53,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":41,"column":23,"nodeType":"185","messageId":"186","endLine":41,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":48,"column":5,"nodeType":"185","messageId":"186","endLine":48,"endColumn":16},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"lines-around-directive",["204"],"no-spaced-func",["205"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-unused-vars","'PAGES' is defined but never used.","Identifier","unusedVar","'match' is assigned a value but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.","'Checkbox' is defined but never used.","'GENDER' is defined but never used.","'CITIES' is defined but never used.","'MARTIAL_STATUSES' is defined but never used.","'CITIZENSHIPS' is defined but never used.","'DISABILITIES' is defined but never used.","no-global-assign","no-unsafe-negation","padding-line-between-statements","func-call-spacing"]